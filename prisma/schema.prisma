// To switch DBs: Change provider in datasource (e.g., "postgresql" or "mysql"), update DATABASE_URL env (e.g., postgres://user:pass@host/db?schema=public for Postgres; mysql://user:pass@host/db for MySQL), then run npx prisma db push && npx prisma generate.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model article_views {
  id               Int            @id @default(autoincrement())
  article_id       Int
  user_id          String?
  viewed_at        DateTime       @default(now())
  question_context String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  hochschuhl_abc   hochschuhl_abc @relation(fields: [article_id], references: [id], onDelete: NoAction)
  user             users?         @relation(fields: [user_id], references: [id])
  @@map("article_views")
}

model auth_sessions {
  id         String   @id @default(cuid())
  user_id    String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@map("auth_sessions")
}

model chat_interactions {
  id               Int                        @id @default(autoincrement())
  session_id       String
  question         String
  answer           String?
  was_successful   Boolean?                   @default(false)
  response_time_ms Int?
  tokens_used      Int?
  timestamp        DateTime?
  error_message    String?
  created_at       DateTime                   @default(now())
  updated_at       DateTime                   @updatedAt
  user_sessions    user_sessions              @relation(fields: [session_id], references: [session_id], onDelete: NoAction)
}

model conversations {
  id                String     @id
  anonymous_user_id String
  category          String?    @default("Unkategorisiert")
  ai_confidence     Float?
  created_at        DateTime
  updated_at        DateTime   @updatedAt
  messages          messages[]
}

model daily_question_stats {
  id                  Int       @id @default(autoincrement())
  analysis_date       String
  normalized_question String
  question_count      Int
  topic               String?
  languages_detected  String?
  original_questions  String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
}

model feedback {
  id                    Int       @id @default(autoincrement())
  user_id               String?
  text                  String
  email                 String?
  rating                Int?
  conversation_id       String?
  attached_chat_history String?
  submitted_at          DateTime @default(now())
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  user                  users?    @relation(fields: [user_id], references: [id])
  @@map("feedback")
}

model hochschuhl_abc {
  id            Int                        @id @default(autoincrement())
  article       String
  description   String?
  editor        String?
  last_updated  DateTime?
   active        Boolean?                   @default(true)
   archived      DateTime?
   created_at    DateTime                   @default(now())
  updated_at    DateTime                   @updatedAt
  article_views article_views[]
  questions     questions[]
  documents     documents[]
  @@map("hochschul_abc")
}
model images {
  id          Int      @id @default(autoincrement())
  filename    String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model messages {
  id              Int           @id @default(autoincrement())
  conversation_id String
  role            String
  content         String
  created_at      DateTime
  updated_at      DateTime      @updatedAt
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
}

model page_views {
  id        Int       @id @default(autoincrement())
  path      String    @default("/")
  timestamp DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}



model question_analysis_cache {
  id                  Int                        @id @default(autoincrement())
  cache_key           String
  normalized_question String
  question_count      Int?                       @default(1)
  topic               String?
  languages_detected  String?
  original_questions  String
  last_updated        DateTime?
  is_processing       Boolean?                   @default(false)
  created_at          DateTime                   @default(now())
  updated_at          DateTime                   @updatedAt
}

model question_cache {
  id         Int      @id @default(autoincrement())
  question   String   @unique
  answer     String
  status     String   @default("pending")
  hit_count  Int?     @default(0)
  created_at DateTime
  updated_at DateTime @updatedAt
}

model questions {
  id                Int                        @id @default(autoincrement())
  question          String
  answer            String?
  user              String?
  category_id       Int?
  last_updated      DateTime?
  archived          Boolean?                   @default(false)
  linked_article_id Int?
  answered          Boolean?                   @default(false)
  spam              Boolean?                   @default(false)
  deleted           Boolean?                   @default(false)
  translation       String?
  feedback          String?
  answered_at       DateTime?
  created_at        DateTime                   @default(now())
  updated_at        DateTime                   @updatedAt
  hochschuhl_abc    hochschuhl_abc?            @relation(fields: [linked_article_id], references: [id])
  @@map("questions")
}

model sessions {
  id            Int       @id @default(autoincrement())
  token_hash    String    @unique
  username      String
  role          String
  created_at    DateTime?
  last_activity DateTime?
  expires_at    DateTime
  updated_at    DateTime  @updatedAt
}

model token_usage {
  id          Int       @id @default(autoincrement())
  token_count Int
  timestamp   DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model user_sessions {
  id                 Int                 @id @default(autoincrement())
  session_id         String              @unique
  ip_address         String?
  user_agent         String?
  started_at         DateTime?
  last_activity      DateTime?
  questions_count    Int?                @default(0)
  successful_answers Int?                @default(0)
  ended_at           DateTime?
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  chat_interactions  chat_interactions[]
}

model users {
  id            String         @id @default(cuid())
  username      String         @unique
  password      String
  role          String         @default("editor")
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  feedback      feedback[]
  article_views article_views[]
  auth_sessions auth_sessions[]
}

model documents {
  id          Int                        @id @default(autoincrement())
  article_id  Int?
  filepath    String
  file_type   String
  description String?
  uploaded_at DateTime                   @default(now())
  created_at  DateTime                   @default(now())
  updated_at  DateTime                   @updatedAt
  hochschuhl_abc hochschuhl_abc?         @relation(fields: [article_id], references: [id])
  @@map("documents")
}
